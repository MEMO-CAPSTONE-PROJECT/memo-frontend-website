name: Auto deploy website to server

on: workflow_dispatch
# Auto push
#  push:
#   branches:
#      - main
  
jobs:
  deploy:
    name: Deploy project
    permissions:
      deployments: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: 'actions/checkout@v4'
        with:
          ref: main
          token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
      ### CACHE DEPENDENCIES ###
      - name: Install OpenVPN 
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: openvpn openvpn-systemd-resolved
      ##########################
      - name: Connect to VPN
        uses: "kota65535/github-openvpn-connect-action@v3"
        with:
          config_file: .github/workflows/client.ovpn
          username: ${{ secrets.VPN_USERNAME }}
          password: ${{ secrets.VPN_PASSWORD }}    
      - name: Create GitHub deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: '${{ github.token }}'
          environment-url: ${{ vars.MY_APP }}
          environment: Production
      - name: Set up SSH Key and Deploy
        # run: |
        uses: appleboy/ssh-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            cd /home/duangcharoen024/Server/Frontend
            git pull https://${{ secrets.PERSONAL_GITHUB_USERNAME }}:${{ secrets.PERSONAL_GITHUB_TOKEN }}@github.com/MEMO-CAPSTONE-PROJECT/MEMO-FRONTEND-WEBSITE.git
            cd ..
            docker compose down frontend
            docker compose up --build -d frontend
      - name: Update deployment Status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ vars.MY_APP }}
          state: 'success'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ vars.MY_APP }}
          state: 'failure'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}     
