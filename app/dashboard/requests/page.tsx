"use client";
import React, { useEffect, useState } from "react";
import Sidebar from "@/components/dashboard/sidebar";
import TopbarButton from "@/components/button/memo-topbar";
import Filterbutton from "@/components/dashboard/filterbutton";
import Searchbar from "@/components/dashboard/searchbar";
import apiClient from "@/components/axios/axiosConfig";
import AuthGuard from "@/components/AuthGuard/AuthGuard";
import Table from "@/components/dashboard/table";
import { MEMO_API } from "@/constants/apis";
import axios from "axios";


  interface TeacherData {
    registerId: number;
    status: string;
    role:string;
    registerTeacherData: {
      position: string;
      class?: { level?: number; room?: number };
      email: string;
      firstName: string;
      lastName: string;
      gender: string;
      phoneNumber: string;
    };
  }
  interface StudentData {
    registerId: number;
    status: string;
    role:string;
    registerStudentData: {
      student: {
        classRoom: string;
        classLevel: string;
        displayName: string;
        firstName: string;
        lastName: string;
        gender: string;
        emailStudent: string;
        phoneNumber: string;
        parentPhoneNumber: string;
      };
    };
  }
const UserRequests = () => {

    const [activeMenu, setActiveMenu] = useState<string>("‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏π");
    const [teachers, setTeachers] = useState<TeacherData[]>([]);
    const [students, setStudents] = useState<StudentData[]>([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
  
    const fetchData = async () => {
      setLoading(true);
      try {
        const response = await apiClient.get(MEMO_API.allUserRequests);
        const registers = response.data.data.registers;
        
        setTeachers(
          registers
            .filter((item: any) => item.role === "teacher" && item.registerTeacherData)
            .map((item: any) => ({
              registerId: item.registerId,
              status: item.status,
              role: item.role,
              registerTeacherData: item.registerTeacherData,
            }))
        );
        
        setStudents(
          registers
            .filter((item: any) => item.role === "student" && item.registerStudentData)
            .map((item: any) => ({
              registerId: item.registerId,
              status: item.status,
              role: item.role,
              registerStudentData: item.registerStudentData,
            }))
        );
        
      } catch (err) {
        setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
      }
      setLoading(false);
    };
  
    useEffect(() => {
      fetchData();
    }, []);
    


  const columnsTeacher = [
    { header: "ID", key: "id", className: "w-20" },
    { header: "‡∏ä‡∏∑‡πà‡∏≠", key: "firstName" },
    { header: "‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", key: "lastName" },
    { header: "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á", key: "position" },
    { header: "‡∏ä‡∏±‡πâ‡∏ô", key: "class" },
    { header: "‡πÄ‡∏û‡∏®", key: "gender", className: "w-24" },
    { header: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•", key: "email" },
    { header: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", key: "phoneNumber" },
    { header: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", key: "status", className: "w-32" },
    { header: "‡πÅ‡∏≠‡∏Ñ‡∏ä‡∏±‡πà‡∏ô", key: "action", className: "w-40" },
  ];

  // üîπ ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
  const columnsStudent = [
    { header: "ID", key: "id", className: "w-20" },
    { header: "‡∏ä‡∏∑‡πà‡∏≠", key: "firstName" },
    { header: "‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", key: "lastName" },
    { header: "‡∏ä‡∏±‡πâ‡∏ô", key: "classLevelRoom" },
    { header: "‡πÄ‡∏û‡∏®", key: "gender", className: "w-24" },
    { header: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•", key: "emailStudent" },
    { header: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", key: "phoneNumber" },
    { header: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", key: "status", className: "w-32" },
    { header: "‡πÅ‡∏≠‡∏Ñ‡∏ä‡∏±‡πà‡∏ô", key: "action", className: "w-40" },
  ];
  
  const handleApprove = async (id: number, role: string) => {
    try {
      const apiUrl =
        role === "teacher" ? MEMO_API.teacherApprove : MEMO_API.studentApprove;
      
      await axios.put(apiUrl, { id: id.toString() });
  
      console.log(`‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ID: ${id}`);
      fetchData();
    } catch (error) {
      console.error(`‚ùå ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ID: ${id}`, error);
    }
  };

  const handleReject = async (id: number) => {
    try {
      await axios.put(MEMO_API.allUserDecline, { id: id.toString() });
  
      console.log(`‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ID: ${id}`);
      fetchData();
    } catch (error) {
      console.error(`‚ö†Ô∏è ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ID: ${id}`, error);
    }
  };

  const getStatusCell = (status: string) => {
    let bgColor = "bg-gray-200"; 
    if (status === "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥") bgColor = "bg-system-success-light border-system-success-2 rounded-sm text-system-success-2";
    else if (status === "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥") bgColor = "bg-secondary-4 border-system-success-2 rounded-sm text-system-error-2 ";
    else if (status === "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£") bgColor = "bg-system-blue text-system-button border-system-button rounded-sm";
  
    return <span className={`px-2 py-1 rounded text-center ${bgColor}`}>{status}</span>;
  };  
  
  const renderRow = (item: TeacherData | StudentData) => {
    const actionButtons = (id: number, role: string) => (
      <div className="flex gap-2">
        <button
          className="bg-system-success-2 text-system-white px-6 py-2 rounded-sm flex items-center space-x-2"
          onClick={() => handleApprove(id, role)}
        >
          ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
        </button>
        <button
          className="bg-system-error-2 text-system-white px-6 py-2 rounded-sm flex items-center space-x-2"
          onClick={() => handleReject(id)}
        >
          ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
        </button>
      </div>
    );
  
    if (item.role === "teacher") {
      const teacher = item as TeacherData;
      const classLevel = teacher.registerTeacherData.class?.level
        ? `‡∏õ.${teacher.registerTeacherData.class.level}`
        : "";
      const classRoom = teacher.registerTeacherData.class?.room
        ? `/${teacher.registerTeacherData.class.room}`
        : "";
      const classDisplay = classLevel || classRoom ? `${classLevel}${classRoom}` : "-";
  
      return [
        teacher.registerId,
        teacher.registerTeacherData.firstName,
        teacher.registerTeacherData.lastName,
        teacher.registerTeacherData.position,
        classDisplay,
        teacher.registerTeacherData.gender,
        teacher.registerTeacherData.email,
        teacher.registerTeacherData.phoneNumber,
        getStatusCell(teacher.status), 
        statusFilter === "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" ? actionButtons(teacher.registerId, teacher.role) : null, 
      ].filter((col) => col !== null); 
    } else {
      const student = item as StudentData;
      return [
        student.registerId,
        student.registerStudentData.student.firstName,
        student.registerStudentData.student.lastName,
        `‡∏õ.${student.registerStudentData.student.classLevel}/${student.registerStudentData.student.classRoom}`,
        student.registerStudentData.student.gender,
        student.registerStudentData.student.emailStudent,
        student.registerStudentData.student.phoneNumber,
        getStatusCell(student.status),
        statusFilter === "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" ? actionButtons(student.registerId, student.role) : null, 
      ].filter((col) => col !== null); 
    }
  };
  
  
  const [statusFilter, setStatusFilter] = useState<string>("‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£");

  const handleStatusFilter = (status: string) => {
    setStatusFilter(status);
  };
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  const data: (TeacherData | StudentData)[] =
    activeMenu === "‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏π" ? teachers : students;
  
  // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const filteredData = data.filter((item) => item.status === statusFilter);
  
  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
  const baseColumns =
    activeMenu === "‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏π" ? columnsTeacher : columnsStudent;
  
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå action ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏´‡πâ‡∏ã‡πà‡∏≠‡∏ô
  const filteredColumns =
    statusFilter === "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
      ? baseColumns
      : baseColumns.filter((col) => col.key !== "action");

  return (
    <AuthGuard>
    <div className="flex bg-system-white w-screen">
      <Sidebar />

      <div className="ml-4 pt-6 p-6 text-title-1 w-full bg-system-white">
        <div className="flex ">
          <TopbarButton
            name="‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏π"
            isActive={activeMenu === "‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏π"}
            onClick={() => setActiveMenu("‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏π")}
          />
          <TopbarButton
            name="‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"
            isActive={activeMenu === "‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"}
            onClick={() => setActiveMenu("‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô")}
          />
        </div>
        <div className="pt-8">
          <p className="text-[20px] font-semibold">
            ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
            {activeMenu === "‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏π" ? "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏π" : "‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"}
          </p>
          <p className="text-[16px] text-body-2">
          ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠{activeMenu === "‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏π" ? "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏π" : "‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"}
            ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Memo ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
          </p>
        </div>

        <div className="flex gap-2 my-4">
  <button
    className={`px-4 py-2 rounded ${statusFilter === "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" ? "bg-green-500 text-white" : "bg-gray-200"}`}
    onClick={() => handleStatusFilter("‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥")}
  >
    ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  </button>
  <button
    className={`px-4 py-2 rounded ${statusFilter === "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" ? "bg-red-500 text-white" : "bg-gray-200"}`}
    onClick={() => handleStatusFilter("‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥")}
  >
    ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  </button>
  <button
    className={`px-4 py-2 rounded ${statusFilter === "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" ? "bg-blue-500 text-white" : "bg-gray-200"}`}
    onClick={() => handleStatusFilter("‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")}
  >
    ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
  </button>
</div>

<Table<TeacherData | StudentData>
  columns={filteredColumns}
  data={filteredData}
  renderRow={renderRow}
  loading={loading}
  error={error}
/>


        </div>
      </div>
    </AuthGuard>
  );
};

export default UserRequests;
